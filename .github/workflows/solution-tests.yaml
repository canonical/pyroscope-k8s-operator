name: Solution Tests

on:
  pull_request:
    branches:
      - main
      - track/**
  push:
    branches:
      - main
      - track/**

jobs:
    pack-charms:
        name: Pack the coordinator & worker charms
        runs-on: ubuntu-latest
        steps:
         - name: Checkout
           uses: actions/checkout@v4
         - name: Setup LXD
           uses: canonical/setup-lxd@main
         - name: Install charmcraft
           run: sudo snap install charmcraft --classic
         - name: Cache wheels
           uses: actions/cache@v4
           with:
                path: /home/runner/snap/charmcraft/common/cache/charmcraft
                key: ${{ runner.os }}-wheel-cache-${{ hashFiles('./uv.lock') }}
                # If the above cache key doesn't match, it's because the uv.lock has changed.
                # Even so, pre-existing caches may still contain useful cached builds for some
                # portion of the dependencies, and restore-keys can partially match a cache.
                restore-keys: |
                    ${{ runner.os }}-wheel-cache-
         - name: Run charmcraft pack on the coordinator
           run: |
            cd coordinator
            charmcraft pack -v
         - name: Run charmcraft pack on the worker
           run: |
            cd worker
            charmcraft pack -v
         - name: Upload coordinator charm artifact
           uses: actions/upload-artifact@v4
           with:
            name: coordinator-charms-tests
            path: coordinator/*.charm
         - name: Upload worker charm artifact
           uses: actions/upload-artifact@v4
           with:
            name: worker-charms-tests
            path: worker/*.charm

    solution-matrix:
        name: Define Solution tests matrix
        runs-on: ubuntu-latest
        needs: [pack-charms]
        outputs:
            suites: ${{ steps.suites.outputs.suites }}
        steps:
          - name: Checkout
            uses: actions/checkout@v4
          - name: Generate matrix list
            id: suites
            run: |
                list="$(find tests/solution -name 'test_*.py' -printf '%f\n' | jq -r -ncR '[inputs]')"
                echo "suites=$list"
                echo "suites=$list" >> "$GITHUB_OUTPUT"

    solution-test:
        name: Solution Tests (${{ matrix.mode }} | ${{ matrix.suite }})
        runs-on: ubuntu-latest
        needs: [pack-charms, solution-matrix]
        strategy:
            fail-fast: false
            matrix:
                suite: ${{ fromJSON(needs.solution-matrix.outputs.suites) }}
                # Run the solution-level integration tests in the following deployment modes.
                # TODO: Add logic to include a mode only when relevant files have changed.
                mode:
                - local-coordinator
                - local-worker
                - local-both
        env:
            CONCIERGE_JUJU_CHANNEL: 3.6/stable
            CONCIERGE_MICROK8S_CHANNEL: 1.32-strict/stable
            CONCIERGE_CHARMCRAFT_CHANNEL: 3.x/candidate
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Install dependencies
              run: |
                sudo snap install concierge --classic
                sudo concierge prepare -p microk8s --extra-snaps=astral-uv
                sudo snap install kubectl --classic
                juju model-defaults automatically-retry-hooks=true
            - name: Download coordinator charm artifact
              uses: actions/download-artifact@v4
              with:
                name: coordinator-charms-tests
                path: ./coordinator
            - name: Download worker charm artifact
              uses: actions/download-artifact@v4
              with:
                name: worker-charms-tests
                path: ./worker
            - name: Run solution tests
              run: |

                if [ "${{ matrix.mode }}" = "local-coordinator" ]; then
                    charm_relative_path="$(find ./coordinator -maxdepth 1 -name '*.charm' | tail -n1)"
                    COORDINATOR_CHARM_PATH="$(realpath "$charm_relative_path")"
                    export COORDINATOR_CHARM_PATH
                    WORKER_CHARM_CHANNEL=2/edge
                    export WORKER_CHARM_CHANNEL
                elif [ "${{ matrix.mode }}" = "local-worker" ]; then
                    charm_relative_path="$(find ./worker -maxdepth 1 -name '*.charm' | tail -n1)"
                    WORKER_CHARM_PATH="$(realpath "$charm_relative_path")"
                    export WORKER_CHARM_PATH
                    COORDINATOR_CHARM_CHANNEL=2/edge
                    export COORDINATOR_CHARM_CHANNEL
                elif [ "${{ matrix.mode }}" = "local-both" ]; then
                    coord_relative_path="$(find ./coordinator -maxdepth 1 -name '*.charm' | tail -n1)"
                    COORDINATOR_CHARM_PATH="$(realpath "$coord_relative_path")"
                    export COORDINATOR_CHARM_PATH
                    worker_relative_path="$(find ./worker -maxdepth 1 -name '*.charm' | tail -n1)"
                    WORKER_CHARM_PATH="$(realpath "$worker_relative_path")"
                    export WORKER_CHARM_PATH
                else
                    echo "Unknown mode: ${{ matrix.mode }}"
                    exit 1
                fi
                uvx tox -e solution -- -k "${{ matrix.suite }}"
